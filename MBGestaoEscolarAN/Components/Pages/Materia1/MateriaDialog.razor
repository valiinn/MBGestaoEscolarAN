@using MBGestaoEscolarAN.Entities
@using MBGestaoEscolarAN.Services.Interfaces
@using MBGestaoEscolarAN.ViewModels
@using MudBlazor

@inject IMateriaService MateriaService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Book" Class="mr-3" /> @viewModel.TituloFormulario
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 70vh; overflow-y: auto;">
            <EditForm Model="@viewModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField Label="Nome da Matéria"
                                      @bind-Value="viewModel.Nome"
                                      For="@(() => viewModel.Nome)"
                                      Required="true"
                                      Immediate="true" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="Carga Horária"
                                         @bind-Value="viewModel.CargaHoraria"
                                         For="@(() => viewModel.CargaHoraria)"
                                         Required="true"
                                         Min="1" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="Peso da Nota"
                                         @bind-Value="viewModel.PesoNota"
                                         For="@(() => viewModel.PesoNota)"
                                         Required="true"
                                         Step="0.1M" Min="0.1M" />
                    </MudItem>

                    @* NOTA: Para TurmaId e InstrutorId, o ideal é usar um MudSelect
                        que carrega as turmas e instrutores disponíveis.
                        Por simplicidade, usaremos um NumericField.
                        Para usar MudSelect, você precisaria injetar os serviços de Turma e Instrutor
                        e carregar as listas em OnInitializedAsync.
                    *@

                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="ID da Turma"
                                         HelperText="Trocar por um seletor de Turmas no futuro"
                                         @bind-Value="viewModel.TurmaId"
                                         For="@(() => viewModel.TurmaId)"
                                         Required="true" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="ID do Instrutor"
                                         HelperText="Trocar por um seletor de Instrutores no futuro"
                                         @bind-Value="viewModel.InstrutorId"
                                         For="@(() => viewModel.InstrutorId)"
                                         Required="true" />
                    </MudItem>

                </MudGrid>
            </EditForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   Disabled="@salvando"
                   OnClick="SalvarMateria">
            @if (salvando)
            {
                <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ml-2">Salvando...</MudText>
            }
            else
            {
                <MudText>@viewModel.TextoBotao</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Materia materia { get; set; } = new();

    private MateriaViewModel viewModel = new();
    private bool salvando = false;

    protected override async Task OnInitializedAsync()
    {
        if (materia?.MateriaId > 0)
        {
            // Modo de edição
            viewModel = new MateriaViewModel
            {
                MateriaId = materia.MateriaId,
                Nome = materia.Nome,
                CargaHoraria = materia.CargaHoraria,
                PesoNota = materia.PesoNota,
                TurmaId = materia.TurmaId,
                InstrutorId = materia.InstrutorId,
            };
        }
        else
        {
            // Modo de criação
            viewModel = new MateriaViewModel();
        }
    }

    private async Task SalvarMateria()
    {
        salvando = true;
        bool sucesso = false;
        try
        {
            var materiaModel = new Materia
            {
                MateriaId = viewModel.MateriaId,
                Nome = viewModel.Nome,
                CargaHoraria = viewModel.CargaHoraria,
                PesoNota = viewModel.PesoNota,
                TurmaId = viewModel.TurmaId.Value, // .Value pois é Required
                InstrutorId = viewModel.InstrutorId.Value, // .Value pois é Required
            };

            if (viewModel.IsEdicao)
            {
                sucesso = await MateriaService.AlterarAsync(materiaModel);
                Snackbar.Add("Matéria atualizada com sucesso!", Severity.Success);
            }
            else
            {
                var newId = await MateriaService.AdicionarAsync(materiaModel);
                sucesso = newId > 0;
                Snackbar.Add("Matéria criada com sucesso!", Severity.Success);
            }

            if (sucesso)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar a matéria: {ex.Message}", Severity.Error);
        }
        finally
        {
            salvando = false;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await SalvarMateria();
    }

    void Cancel() => MudDialog.Cancel();
}
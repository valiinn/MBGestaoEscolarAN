@page "/materias"
@using MudBlazor
@using MBGestaoEscolarAN.Entities
@using MBGestaoEscolarAN.Services.Interfaces
@inject IMateriaService MateriaService
@inject ITurmaService TurmaService
@inject IInstrutorService InstrutorService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-4">Lista de Matérias</MudText>

        <MudPaper Class="d-flex justify-end flex-grow-1 mb-6" Elevation="0">
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Add"
                       Disabled="@_dialogOpen"
                       OnClick="() => ShowDialog(null)">
                Adicionar Nova Matéria
            </MudButton>
        </MudPaper>

        @if (materias == null || turmas == null || instrutores == null)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            <p>Carregando dados...</p>
        }
        else
        {
            <MudDataGrid Items="materias" Hover="true" SortMode="SortMode.Multiple" Bordered="true" Striped="true">
                <Columns>
                    <PropertyColumn Property="x => x.MateriaId" Title="ID" />
                    <PropertyColumn Property="x => x.Nome" Title="Nome" />

                    <TemplateColumn Title="Turma">
                        <CellTemplate>
                            @context.Item.Turma?.Nome
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="Instrutor">
                        <CellTemplate>
                            @context.Item.Instrutor?.Nome
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn StickyRight="true" Title="Ações" Width="150px">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           OnClick="() => ShowDialog(context.Item.MateriaId)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           Size="Size.Small"
                                           OnClick="() => ConfirmarExclusaoMateria(context.Item)" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="Materia" />
                </PagerContent>
            </MudDataGrid>
        }
    </MudCardContent>
</MudCard>

@code {
    private List<Materia> materias = new();
    private List<Turma> turmas = new();
    private List<Instrutor> instrutores = new();
    private bool _dialogOpen = false;

    private readonly DialogOptions _dialogOptions = new()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    private async Task CarregarDados()
    {
        materias = (await MateriaService.ListarTodosAsync()).ToList();
        turmas = (await TurmaService.ListarTodosAsync()).ToList();
        instrutores = (await InstrutorService.ListarTodosAsync()).ToList();
    }

    private async Task ShowDialog(int? materiaId)
    {
        _dialogOpen = true;

        var parameters = new DialogParameters
        {
            { "Turmas", turmas },
            { "Instrutores", instrutores }
        };

        if (materiaId.HasValue)
        {
            var materia = materias.FirstOrDefault(m => m.MateriaId == materiaId.Value);
            parameters.Add("Materia", materia);
            parameters.Add("Title", "Editar Matéria");
        }
        else
        {
            parameters.Add("Materia", new Materia());
            parameters.Add("Title", "Nova Matéria");
        }

        var dialog = DialogService.Show<MateriaDialog>(parameters["Title"]!.ToString(), parameters, _dialogOptions);
        var result = await dialog.Result;

        _dialogOpen = false;

        if (!result.Canceled)
        {
            await CarregarDados();
            StateHasChanged();
        }
    }

    private async Task ConfirmarExclusaoMateria(Materia materia)
    {
        bool? confirmado = await DialogService.ShowMessageBox(
            "Confirmação de Exclusão",
            $"Deseja realmente excluir a matéria '{materia.Nome}'?",
            yesText: "Sim", cancelText: "Não");

        if (confirmado == true)
        {
            await MateriaService.ExcluirAsync(materia.MateriaId);
            await CarregarDados();
            Snackbar.Add($"Matéria '{materia.Nome}' excluída com sucesso.", Severity.Success);
            StateHasChanged();
        }
    }
}

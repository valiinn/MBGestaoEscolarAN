@page "/materias"
@using MudBlazor
@using MBGestaoEscolarAN.Entities
@using MBGestaoEscolarAN.Services.Interfaces

@inject IMateriaService MateriaService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-4">Matérias Cadastradas</MudText>
        <MudPaper Class="d-flex justify-end flex-grow-1 mb-6" Elevation="0">
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="() => ShowDialog(0)">
                Adicionar Nova Matéria
            </MudButton>
        </MudPaper>

        <MudDataGrid Items="@_materias" SortMode="SortMode.Multiple" Hover="true" Striped="true">
            <Columns>
                <PropertyColumn Property="x => x.MateriaId" Title="ID" />
                <PropertyColumn Property="x => x.Nome" Title="Nome da Matéria" />
                <PropertyColumn Property="x => x.CargaHoraria" Title="Carga Horária" />
                <PropertyColumn Property="x => x.PesoNota" Title="Peso" Format="N2" />
                <PropertyColumn Property="x => x.TurmaId" Title="ID Turma" />
                <PropertyColumn Property="x => x.InstrutorId" Title="ID Instrutor" />
                <TemplateColumn StickyRight="true" Title="Ações">
                    <CellTemplate>
                        <MudIconButton Color="Color.Primary"
                                       Icon="@Icons.Material.Filled.Edit"
                                       Size="Size.Small"
                                       OnClick="() => ShowDialog(context.Item.MateriaId)" />
                        <MudIconButton Color="Color.Error"
                                       Icon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       OnClick="() => ConfirmaExclusao(context.Item)" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Materia" />
            </PagerContent>
        </MudDataGrid>

    </MudCardContent>
</MudCard>

@code {
    private List<Materia> _materias = new();

    private readonly DialogOptions _dialogOptions = new()
    {
        CloseButton = true,
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };

    protected override async Task OnInitializedAsync()
    {
        await CarregarMaterias();
    }

    private async Task CarregarMaterias()
    {
        try
        {
            _materias = (await MateriaService.ListarTodosAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar matérias: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowDialog(int idMateria)
    {
        var parameters = new DialogParameters();
        string title;

        if (idMateria > 0)
        {
            var materia = _materias.FirstOrDefault(x => x.MateriaId == idMateria);
            parameters.Add("materia", materia);
            title = "Editar Matéria";
        }
        else
        {
            parameters.Add("materia", new Materia());
            title = "Nova Matéria";
        }

        var dialog = DialogService.Show<MateriaDialog>(title, parameters, _dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await CarregarMaterias();
            StateHasChanged();
        }
    }

    private async Task ConfirmaExclusao(Materia materia)
    {
        var confirmed = await DialogService.ShowMessageBox(
                "Confirmação de Exclusão",
                $"Deseja realmente excluir a matéria '{materia.Nome}'?",
                yesText: "Sim, Excluir",
                cancelText: "Não"
        );

        if (confirmed == true)
        {
            var sucesso = await MateriaService.ExcluirAsync(materia.MateriaId);
            if (sucesso)
            {
                await CarregarMaterias();
                Snackbar.Add($"Matéria '{materia.Nome}' removida com sucesso.", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Não foi possível remover a matéria.", Severity.Error);
            }
        }
    }
}